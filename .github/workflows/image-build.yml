name: Build, Publish & Test Docker Image

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU (optional)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/scala-runner:latest
            ghcr.io/${{ github.repository_owner }}/scala-runner:${{ github.sha }}
        # expose the image ref for downstream jobs
      - run: echo "image=ghcr.io/${{ github.repository_owner }}/scala-runner:latest" >> $GITHUB_OUTPUT

  integration-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Pull the freshly-pushed image
      - name: Pull image
        run: |
          IMAGE=${{ needs.build-and-push.outputs.image }}
          docker pull $IMAGE

      # Run it with the socket mounted
      - name: Start container
        run: |
          IMAGE=${{ needs.build-and-push.outputs.image }}
          docker run -d --name scala-test \
            -p 8080:80 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            $IMAGE

      # Wait for app to become healthy
      - name: Wait for API
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080/ping | grep pong; then
              echo "API is up"
              exit 0
            fi
            sleep 2
          done
          echo "API did not start in time" >&2
          exit 1

      # Test launching a nested Docker container via /run
      - name: Test Docker-in-Docker
        run: |
          # This Scala one‚Äêliner prints the list of running Docker containers inside our container:
          PAYLOAD='{"code": "println(scala.util.Properties.versionString)","scala_version": "2.13"}'
          curl -s -X POST http://localhost:8080/run \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" | jq .

      # Tear down
      - name: Cleanup
        run: docker rm -f scala-test